{"mappings":"ACEA,IAAM,EAAY,SAAS,aAAa,CAAC,cACnC,EAAQ,SAAS,aAAa,CAAC,UAAU,QAAQ,CAAC,EAAE,CACpD,EAAO,EAAM,IAAI,CAKvB,EAAU,gBAAgB,CAAC,QAE3B,SAAqB,CAAC,EACpB,GAAI,AAAqB,WAArB,EAAE,MAAM,CAAC,OAAO,CAIpB,OAAQ,CAAA,GACN,KAAM,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAChC,IAAM,EAAS,EAAK,IAAI,CAAC,GAAG,SAAS,CAAC,CAAA,EAElC,CAAA,EAAM,iBAAiB,CAdf,KAeV,EAAM,MAAM,CAAC,GACb,SAAS,aAAa,CAAC,eAAe,QAAQ,CAAG,CAAA,EAhBvC,KAkBN,EAAM,iBAAiB,EACzB,CAAA,SAAS,aAAa,CAAC,eAAe,QAAQ,CAAG,CAAA,CADnD,GAIF,KAEF,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAChC,GAAI,EAAM,iBAAiB,EAxBf,EAyBV,OAGF,EAAM,QAAQ,CAAC,EAAM,iBAAiB,CAAG,EAAE,CAAC,MAAM,GAClD,SAAS,aAAa,CAAC,eAAe,QAAQ,CAAG,CAAA,EA7BrC,IA+BR,EAAM,iBAAiB,EACzB,CAAA,SAAS,aAAa,CAAC,eAAe,QAAQ,CAAG,CAAA,CADnD,EAGA,KAEF,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,iBAChC,GAAI,EAAM,iBAAiB,CAAC,iBAAiB,CAtCjC,GAsC+C,CACpD,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,MAAM,CAAC,SAAS,aAAa,CAAC,M,C,M,E,CAD/B,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,SAAS,aAAa,CAAC,kBAAkB,QAAQ,CAAG,CAAA,EA3C1C,KA6CN,EAAM,iBAAiB,CAAC,iBAAiB,EAC3C,CAAA,SAAS,aAAa,CAAC,kBAAkB,QAAQ,CAAG,CAAA,CADtD,CAGF,CAEA,KAEF,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,iBAChC,GAAI,EAAM,iBAAiB,CAAC,iBAAiB,EApDjC,EAqDV,OAGG,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,gBAAgB,CAAC,MAAM,E,C,M,E,CADxB,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGL,SAAS,aAAa,CAAC,kBAAkB,QAAQ,CAAG,CAAA,EA3DxC,IA6DR,EAAM,iBAAiB,CAAC,iBAAiB,EAC3C,CAAA,SAAS,aAAa,CAAC,kBAAkB,QAAQ,CAAG,CAAA,CADtD,CAQJ,CACF,C,2D","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar container = document.querySelector(\".container\");\nvar tbody = document.querySelector(\".field\").children[0];\nvar rows = tbody.rows;\nvar MAX_COUNT = 10;\nvar MIN_COUNT = 2;\ncontainer.addEventListener(\"click\", changeTable);\nfunction changeTable(e) {\n    if (e.target.tagName !== \"BUTTON\") return;\n    switch(true){\n        case e.target.classList.contains(\"append-row\"):\n            var newRow = rows.item(0).cloneNode(true);\n            if (tbody.childElementCount < MAX_COUNT) {\n                tbody.append(newRow);\n                document.querySelector(\".remove-row\").disabled = false;\n                if (tbody.childElementCount === MAX_COUNT) document.querySelector(\".append-row\").disabled = true;\n            }\n            break;\n        case e.target.classList.contains(\"remove-row\"):\n            if (tbody.childElementCount <= MIN_COUNT) return;\n            tbody.children[tbody.childElementCount - 1].remove();\n            document.querySelector(\".append-row\").disabled = false;\n            if (tbody.childElementCount === MIN_COUNT) document.querySelector(\".remove-row\").disabled = true;\n            break;\n        case e.target.classList.contains(\"append-column\"):\n            if (tbody.firstElementChild.childElementCount < MAX_COUNT) {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        row.append(document.createElement(\"td\"));\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                document.querySelector(\".remove-column\").disabled = false;\n                if (tbody.firstElementChild.childElementCount === MAX_COUNT) document.querySelector(\".append-column\").disabled = true;\n            }\n            break;\n        case e.target.classList.contains(\"remove-column\"):\n            if (tbody.firstElementChild.childElementCount <= MIN_COUNT) return;\n            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n            try {\n                for(var _iterator1 = rows[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                    var row1 = _step1.value;\n                    row1.lastElementChild.remove();\n                }\n            } catch (err) {\n                _didIteratorError1 = true;\n                _iteratorError1 = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                        _iterator1.return();\n                    }\n                } finally{\n                    if (_didIteratorError1) {\n                        throw _iteratorError1;\n                    }\n                }\n            }\n            document.querySelector(\".append-column\").disabled = false;\n            if (tbody.firstElementChild.childElementCount === MIN_COUNT) document.querySelector(\".remove-column\").disabled = true;\n            break;\n        default:\n            break;\n    }\n}\n\n//# sourceMappingURL=index.28f2e14c.js.map\n","'use strict';\n\nconst container = document.querySelector('.container');\nconst tbody = document.querySelector('.field').children[0];\nconst rows = tbody.rows;\n\nconst MAX_COUNT = 10;\nconst MIN_COUNT = 2;\n\ncontainer.addEventListener('click', changeTable);\n\nfunction changeTable(e) {\n  if (e.target.tagName !== 'BUTTON') {\n    return;\n  }\n\n  switch (true) {\n    case (e.target.classList.contains('append-row')):\n      const newRow = rows.item(0).cloneNode(true);\n\n      if (tbody.childElementCount < MAX_COUNT) {\n        tbody.append(newRow);\n        document.querySelector('.remove-row').disabled = false;\n\n        if (tbody.childElementCount === MAX_COUNT) {\n          document.querySelector('.append-row').disabled = true;\n        }\n      };\n      break;\n\n    case (e.target.classList.contains('remove-row')):\n      if (tbody.childElementCount <= MIN_COUNT) {\n        return;\n      };\n\n      tbody.children[tbody.childElementCount - 1].remove();\n      document.querySelector('.append-row').disabled = false;\n\n      if (tbody.childElementCount === MIN_COUNT) {\n        document.querySelector('.remove-row').disabled = true;\n      }\n      break;\n\n    case (e.target.classList.contains('append-column')):\n      if (tbody.firstElementChild.childElementCount < MAX_COUNT) {\n        for (const row of rows) {\n          row.append(document.createElement('td'));\n        };\n\n        document.querySelector('.remove-column').disabled = false;\n\n        if (tbody.firstElementChild.childElementCount === MAX_COUNT) {\n          document.querySelector('.append-column').disabled = true;\n        }\n      };\n\n      break;\n\n    case (e.target.classList.contains('remove-column')):\n      if (tbody.firstElementChild.childElementCount <= MIN_COUNT) {\n        return;\n      }\n\n      for (const row of rows) {\n        row.lastElementChild.remove();\n      }\n      document.querySelector('.append-column').disabled = false;\n\n      if (tbody.firstElementChild.childElementCount === MIN_COUNT) {\n        document.querySelector('.remove-column').disabled = true;\n      }\n      break;\n\n    default:\n\n      break;\n  }\n}\n"],"names":["container","document","querySelector","tbody","children","rows","addEventListener","e","target","tagName","classList","contains","newRow","item","cloneNode","childElementCount","append","disabled","remove","firstElementChild","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","createElement","err","return","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","row1","lastElementChild"],"version":3,"file":"index.28f2e14c.js.map"}